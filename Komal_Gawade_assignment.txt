Q1: Merge two arrays by satisfying given constraints
Given two sorted arrays X[] and Y[] of size m and n each where m >= n and X[] has exactly n vacant cells,
 merge elements of Y[] in their correct position in array X[], i.e., merge (X, Y) by keeping the sorted order.

For example,

Input: X[] = { 0, 2, 0, 3, 0, 5, 6, 0, 0 }
Y[] = { 1, 8, 9, 10, 15 } The vacant cells in X[] is represented by 0 
Output: X[] = { 1, 2, 3, 5, 6, 8, 9, 10, 15 }


 Code:

import java.util.Arrays;

public class MergeArrays {
    public static void mergeArrays(int[] X, int[] Y) {
        int m = X.length;
        int n = Y.length;

        // Move all non-zero elements of X to the beginning
        int k = m - 1;
        for (int i = m - 1; i >= 0; i--) {
            if (X[i] != 0) {
                X[k] = X[i];
                k--;
            }
        }

        // Merge X and Y using two pointers
        int i = n; // Starting index of X
        int j = 0; // Starting index of Y
        int l = 0; // Starting index of merged array

        while (i < m && j < n) {
            if (X[i] < Y[j]) {
                X[l] = X[i];
                i++;
            } else {
                X[l] = Y[j];
                j++;
            }
            l++;
        }

        // If there are remaining elements in Y
        while (j < n) {
            X[l] = Y[j];
            j++;
            l++;
        }
    }

    public static void main(String[] args) {
        int[] X = { 0, 2, 0, 3, 0, 5, 6, 0, 0 };
        int[] Y = { 1, 8, 9, 10, 15 };

        mergeArrays(X, Y);
        System.out.println(Arrays.toString(X));
    }
}


Q2:Find maximum sum path involving elements of given arrays
Given two sorted arrays of integers, find a maximum sum path involving elements of both arrays whose sum is maximum. 
We can start from either array, but we can switch between arrays only through its common elements.

For example,

Input: X = { 3, 6, 7, 8, 10, 12, 15, 18, 100 }
Y = { 1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50 }  
The maximum sum path is: 1 —> 2 —> 3 —> 6 —> 7 —> 9 —> 10 —> 12 —> 15 —> 16 —> 18 —> 100 
The maximum sum is 199


Code:


public class MaximumSumPath {
    public static void main(String[] args) {
        int[] X = {3, 6, 7, 8, 10, 12, 15, 18, 100};
        int[] Y = {1, 2, 3, 5, 7, 9, 10, 11, 15, 16, 18, 25, 50};
       
        int maxSum = findMaximumSumPath(X, Y);
        System.out.println("The maximum sum path is: " + maxSum);
    }

    public static int findMaximumSumPath(int[] X, int[] Y) {
        int sumX = 0, sumY = 0, maxSum = 0, i = 0, j = 0;

        while (i < X.length && j < Y.length) {
            if (X[i] < Y[j]) {
                sumX += X[i++];
            } else if (X[i] > Y[j]) {
                sumY += Y[j++];
            } else {
                maxSum += Math.max(sumX, sumY) + X[i];
                sumX = 0;
                sumY = 0;
                i++;
                j++;
            }
        }

        // Add remaining elements of X, if any
        while (i < X.length) {
            sumX += X[i++];
        }

        // Add remaining elements of Y, if any
        while (j < Y.length) {
            sumY += Y[j++];
        }

        // Add the maximum of the remaining sums
        maxSum += Math.max(sumX, sumY);

        return maxSum;
    }
}




Q3:Write a Java Program to count the number of words in a string using HashMap.

Code:


import java.util.HashMap;

public class WordCount {
    public static void main(String[] args) {
        String sentence = "My name is Komal Gawade and Komal is 21 years old";
        HashMap<String, Integer> wordCountMap = countWords(sentence);
        
        // Displaying the word count
        System.out.println("Word Count:");
        for (String word : wordCountMap.keySet()) {
            System.out.println(word + ": " + wordCountMap.get(word));
        }
    }
    
    public static HashMap<String, Integer> countWords(String sentence) {
        HashMap<String, Integer> wordCountMap = new HashMap<>();
        
        // Splitting the sentence into words
        String[] words = sentence.split("\\s+");
        
        // Counting the occurrence of each word
        for (String word : words) {
            // Removing punctuation marks if any
            word = word.replaceAll("[^a-zA-Z0-9]", "").toLowerCase();
            
            // If the word is already present in the map, increment its count
            if (wordCountMap.containsKey(word)) {
                int count = wordCountMap.get(word);
                wordCountMap.put(word, count + 1);
            } else {
                // If the word is not present in the map, add it with count 1
                wordCountMap.put(word, 1);
            }
        }
        
        return wordCountMap;
    }
}



Q4:Write a Java Program to find the duplicate characters in a string.

Code:


import java.util.HashMap;
import java.util.Map;

public class DuplicateCharacters {
    
    public static void main(String[] args) {
        String inputString = "Hello World";
        Map<Character, Integer> duplicateCharactersMap = findDuplicateCharacters(inputString);
        
        System.out.println("Duplicate Characters:");
        for (char c : duplicateCharactersMap.keySet()) {
            if (duplicateCharactersMap.get(c) > 1) {
                System.out.println(c);
            }
        }
    }
    
    public static Map<Character, Integer> findDuplicateCharacters(String input) {
        Map<Character, Integer> charCountMap = new HashMap<>();
        
        // Convert the input string to lowercase for case-insensitive comparison
        input = input.toLowerCase();
        
        // Iterate through each character in the string
        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);
            // Ignore non-alphabetic characters
            if (Character.isLetter(c)) {
                // If the character is already in the map, increment its count
                if (charCountMap.containsKey(c)) {
                    charCountMap.put(c, charCountMap.get(c) + 1);
                } else {
                    // If the character is not in the map, add it with a count of 1
                    charCountMap.put(c, 1);
                }
            }
        }
        
        return charCountMap;
    }
}
